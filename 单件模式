单件模式：确保一个类只有一个实例，并提供一个全局访问点。
参考：https://www.cnblogs.com/lewis0077/p/5128971.html
https://blog.csdn.net/czqqqqq/article/details/80451880
应用场景：某些类，我们希望在程序运行期间有且只有一个实例，原因可能是该类的创建需要消耗系统过多的资源、花费很多的时间，或者业务上客观就要求了只能有一个实例。 比如应用程序中有一些配置文件，我们希望只在系统启动的时候读取这些配置文件，并将这些配置保存在内存中，以后在程序中使用这些配置文件信息的时候不必再重新读取。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。

结构：


![image](https://github.com/venus0315/Design-Patterns/blob/master/singlenton.png)

　　一般包含三个要素：

　　1.私有的静态的实例对象 private static instance

　　2.私有的构造函数（保证在该类外部，无法通过new的方式来创建对象实例） private Singleton(){}

　　3.公有的、静态的、访问该实例对象的方法 public static Singleton getInstance(){}

常见分类：
  懒汉式：顾名思义懒汉式就是应用刚启动的时候，并不创建实例，当外部调用该类的实例或者该类实例方法的时候，才创建该类的实例。是以时间换空间。
    懒汉式的优点：实例在被使用的时候才被创建，可以节省系统资源，体现了延迟加载的思想。
    延迟加载：通俗上将就是：一开始的时候不加载资源，一直等到马上就要使用这个资源的时候，躲不过去了才加载，这样可以尽可能的节省系统资源。
    懒汉式的缺点：由于系统刚启动时且未被外部调用时，实例没有创建；如果一时间有多个线程同时调用LazySingleton.getLazyInstance()方法很有可能会产生  多个实例。懒汉式在多线程下，是不能保持单例实例的唯一性的，要想保证多线程下的单例实例的唯一性得用同步，同步会导致多线程下由于争夺锁资源，运行效率不高。
  
  饥汉式：顾名思义懒汉式就是应用刚启动的时候，不管外部有没有调用该类的实例方法，该类的实例就已经创建好了。以空间换时间。
　　饥汉式的优点：写法简单，在多线程下也能保证单例实例的唯一性，不用同步，运行效率高。
　　饥汉式的缺点：在外部没有使用到该类的时候，该类的实例就创建了，若该类实例的创建比较消耗系统资源，并且外部一直没有调用该实例，那么这部分的系统资源的消耗是没有意义的。

我们提供了对这个实例的全局访问点，getInstance方法是静态的，这意味着它是一个类方法，所以可以在代码的任何地方使用Singleton.getInstance（）
用延迟实例化的方式创建单件，这种做法对资源敏感的对象特别重要。
单件模式的类也可以是一般的类，具有一般的数据和方法。

***多线程问题：

在首次创建对象是需要多线程是互斥进入getInstance（）方法的 ，而其他时刻只是获取对象则不需要互斥调用方法。

private static Singleton uniqueInstance;
private static synchronized Singleton getInstance()


运用双重检查加锁 在getInstance() 中减少使用同步：
双重检查加锁，首先检查是否实例化已经创建了，如果尚未创建，才进行同步。

private volatile static Singleton uniqueInstance;
public static Singleton getInstance(){
if(uinqueIsntance==nulll){
  synchronized (Singleton.class){
    if(uniqueInstance==null){
    uniqueInstance= new Singleton();
    }
 }
}
return uniqueSingleton;
}

上面的实现方案使用一个内部类来维护单例类的实例，当GracefulSingleton被加载的时候，其内部类并不会被初始化，所以可以保证当GracefulSingleton被装载到JVM的时候，不会实例化单例类，当外部调用getInstance方法的时候，才会加载内部类SingletonHoder，从而实例化instance,同时由于实例的建立是在类初始化时完成的，所以天生对多线程友好，getInstance方法也不需要进行同步。

在java中实现单件模式需要私有的构造器，一个静态方法，和一个静态变量。
确定在性能和资源上的限制，然后小心滴选择适当的方案来实现单件，以解决多线程问题
如果使用多个类加载器，可能会导致单件失效而产生多个实例。
