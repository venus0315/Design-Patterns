模板方法模式：
在意个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。

参考:https://blog.csdn.net/carson_ho/article/details/54910518

使用场景：
1.有多个子类共有的方法，且逻辑相同 
2.重要的、复杂的方法，可以考虑作为模板方法
例如：spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，
 比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。
 
 
提高代码复用性 
将相同部分的代码放在抽象的父类中，而将不同的代码放入不同的子类中
实现了反向控制 
通过一个父类调用其子类的操作，通过对子类的具体实现扩展不同的行为，实现了反向控制 & 符合“开闭原则”

结构：
抽象的类包含了模板方法。
模板方法在实现算法的过程中，用到了+原语操作。模板方法本身和原语操作的具体实现之间被结耦了。
每一个具体类都实现了模板方法所需的全部操作，当模板方法需要抽象方法时，会调用他们。




对模板方法进行挂钩：
钩子：
是一种被声明在抽象类中的方法，但只有空或者默认的实现。钩子的存在，可以让子类有能力对算法的不同点进行挂钩。由子类决定要不要挂钩。
钩子的作用：
1.钩子让子类实现算法中可选的部分。
2.可以让子类能够有机会对模板方法中某些即将发生的（或刚刚发生的） 步骤作出反应。
钩子和抽象方法的选择：
当子类必须提供算法中某个方法或步骤的实现时，就使用抽象方法。
如果算法中的某个方法可选，就用钩子。如果是钩子，子类可以选择实现这个钩子，但不强制。





注意：
当写模板方法时， 可以让算法内的步骤不要切割的太细，但也不能太少，没有弹性。




















