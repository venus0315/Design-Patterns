装饰者模式动态的将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。


装饰者和被装饰者对象有相同的超类型。
可以用一个或多个装饰者包装一个对象。
既然装饰者和被装饰者对象有 相同的超类型，所以在任何需要原始对象（被包装的）场合，可以用装饰过的对象代替它。
装饰者可以在所委托被装饰者的行为之前或之后，加上自己的行为，以达到特定的目的。
对象可以在任何时候被装饰，所以在运行时动态地，不限量地用你喜欢的装饰者来装饰对象。


继承属于扩展形式之一，但不见得是达到弹性设计得最佳方式。
在我们设计中，应该允许行为可以被扩展，而无须修改现有代码。
组合和委托可用于在运行时动态地加上新得行为。
除了继承，装饰者模式也可以让我们扩展行为。
装饰者模式意味着一群装饰者类，这些类用来包装具体组件。
装饰者类反映出被装饰得组件类型（事实上，他们具有相同的类型，都经过接口或继承实现）。
可以用无数个装饰者包装一个组件。
装饰者一般对组件的客户是透明的，除非客户程序依赖组件的具体类型。
装饰者会导致设计中出现许多小对象，如果过度使用，会让程序很复杂。
